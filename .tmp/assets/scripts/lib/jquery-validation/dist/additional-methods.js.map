{"version":3,"sources":["lib/jquery-validation/dist/additional-methods.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","stripHtml","value","replace","validator","addMethod","element","params","optional","match","length","format","valueStripped","regex","param","typeParam","optionalValue","i","file","attr","files","RegExp","type","test","account","sum","len","pos","factor","digit","substring","methods","bankaccountNL","call","giroaccountNL","toUpperCase","cifRegEx","letter","number","control","all_sum","even_sum","odd_sum","n","control_digit","control_letter","isOdd","parseInt","toString","substr","firstCN","secondCN","checkResult","cn","result","nCheck","nDigit","bEven","cDigit","charAt","validTypes","mastercard","visa","amex","dinersclub","enroute","discover","jcb","unknown","all","isParamString","symbol","soft","messages","date","check","re","adata","gg","mm","aaaa","xdata","split","Date","UTC","getUTCFullYear","getUTCMonth","getUTCDate","iban","ibancheckdigits","leadingZeroes","cRest","cOperator","countrycode","ibancheck","cChar","bbanpattern","bbancountrypatterns","ibanregexp","p","minimalIBANlength","indexOf","phone_number","nieRegEx","validChars","arrSteps","intSum","int2","intControlNr","equalTo","cep_value","options","$fields","form","$fieldsFirst","eq","data","extend","isValid","filter","elementValue","each","numberFilled","isDefault","caseSensitive","includeTerritories","includeMilitary","text","url","v","LL","VL","FL","rs","d","f","cd","cdv","slice","isNaN"],"mappings":"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","file":"additional-methods.js","sourcesContent":["/*!\n * jQuery Validation Plugin v1.17.0\n *\n * https://jqueryvalidation.org/\n *\n * Copyright (c) 2017 Jörn Zaefferer\n * Released under the MIT license\n */\n(function( factory ) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t\tdefine( ['jquery', './jquery.validate'], factory );\n\t} else if (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory( require( 'jquery' ) );\n\t} else {\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n\n( function() {\n\n\tfunction stripHtml( value ) {\n\n\t\t// Remove html tags and space chars\n\t\treturn value.replace( /<.[^<>]*?>/g, ' ' ).replace( /&nbsp;|&#160;/gi, ' ' )\n\n\t\t// Remove punctuation\n\t\t.replace( /[.(),;:!?%#$'\\\"_+=\\/\\-“”’]*/g, '' );\n\t}\n\n\t$.validator.addMethod( 'maxWords', function( value, element, params ) {\n\t\treturn this.optional( element ) || stripHtml( value ).match( /\\b\\w+\\b/g ).length <= params;\n\t}, $.validator.format( 'Please enter {0} words or less.' ) );\n\n\t$.validator.addMethod( 'minWords', function( value, element, params ) {\n\t\treturn this.optional( element ) || stripHtml( value ).match( /\\b\\w+\\b/g ).length >= params;\n\t}, $.validator.format( 'Please enter at least {0} words.' ) );\n\n\t$.validator.addMethod( 'rangeWords', function( value, element, params ) {\n\t\tvar valueStripped = stripHtml( value ),\n\t\t\tregex = /\\b\\w+\\b/g;\n\t\treturn this.optional( element ) || valueStripped.match( regex ).length >= params[ 0 ] && valueStripped.match( regex ).length <= params[ 1 ];\n\t}, $.validator.format( 'Please enter between {0} and {1} words.' ) );\n\n}() );\n\n// Accept a value from a file input based on a required mimetype\n$.validator.addMethod( 'accept', function( value, element, param ) {\n\n\t// Split mime on commas in case we have multiple types we can accept\n\tvar typeParam = typeof param === 'string' ? param.replace( /\\s/g, '' ) : 'image/*',\n\t\toptionalValue = this.optional( element ),\n\t\ti, file, regex;\n\n\t// Element is optional\n\tif ( optionalValue ) {\n\t\treturn optionalValue;\n\t}\n\n\tif ( $( element ).attr( 'type' ) === 'file' ) {\n\n\t\t// Escape string to be used in the regex\n\t\t// see: https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\n\t\t// Escape also \"/*\" as \"/.*\" as a wildcard\n\t\ttypeParam = typeParam\n\t\t\t\t.replace( /[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&' )\n\t\t\t\t.replace( /,/g, '|' )\n\t\t\t\t.replace( /\\/\\*/g, '/.*' );\n\n\t\t// Check if the element has a FileList before checking each file\n\t\tif ( element.files && element.files.length ) {\n\t\t\tregex = new RegExp( '.?(' + typeParam + ')$', 'i' );\n\t\t\tfor ( i = 0; i < element.files.length; i++ ) {\n\t\t\t\tfile = element.files[ i ];\n\n\t\t\t\t// Grab the mimetype from the loaded file, verify it matches\n\t\t\t\tif ( !file.type.match( regex ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Either return true because we've validated each file, or because the\n\t// browser does not support element.files and the FileList feature\n\treturn true;\n}, $.validator.format( 'Please enter a value with a valid mimetype.' ) );\n\n$.validator.addMethod( 'alphanumeric', function( value, element ) {\n\treturn this.optional( element ) || /^\\w+$/i.test( value );\n}, 'Letters, numbers, and underscores only please' );\n\n/*\n * Dutch bank account numbers (not 'giro' numbers) have 9 digits\n * and pass the '11 check'.\n * We accept the notation with spaces, as that is common.\n * acceptable: 123456789 or 12 34 56 789\n */\n$.validator.addMethod( 'bankaccountNL', function( value, element ) {\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\tif ( !( /^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test( value ) ) ) {\n\t\treturn false;\n\t}\n\n\t// Now '11 check'\n\tvar account = value.replace( / /g, '' ), // Remove spaces\n\t\tsum = 0,\n\t\tlen = account.length,\n\t\tpos, factor, digit;\n\tfor ( pos = 0; pos < len; pos++ ) {\n\t\tfactor = len - pos;\n\t\tdigit = account.substring( pos, pos + 1 );\n\t\tsum = sum + factor * digit;\n\t}\n\treturn sum % 11 === 0;\n}, 'Please specify a valid bank account number' );\n\n$.validator.addMethod( 'bankorgiroaccountNL', function( value, element ) {\n\treturn this.optional( element ) ||\n\t\t\t( $.validator.methods.bankaccountNL.call( this, value, element ) ) ||\n\t\t\t( $.validator.methods.giroaccountNL.call( this, value, element ) );\n}, 'Please specify a valid bank or giro account number' );\n\n/**\n * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.\n *\n * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)\n *\n * Validation is case-insensitive. Please make sure to normalize input yourself.\n *\n * BIC definition in detail:\n * - First 4 characters - bank code (only letters)\n * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)\n * - Next 2 characters - location code (letters and digits)\n *   a. shall not start with '0' or '1'\n *   b. second character must be a letter ('O' is not allowed) or digit ('0' for test (therefore not allowed), '1' denoting passive participant, '2' typically reverse-billing)\n * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)\n */\n$.validator.addMethod( 'bic', function( value, element ) {\n    return this.optional( element ) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test( value.toUpperCase() );\n}, 'Please specify a valid BIC code' );\n\n/*\n * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities\n * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal\n *\n * Spanish CIF structure:\n *\n * [ T ][ P ][ P ][ N ][ N ][ N ][ N ][ N ][ C ]\n *\n * Where:\n *\n * T: 1 character. Kind of Organization Letter: [ABCDEFGHJKLMNPQRSUVW]\n * P: 2 characters. Province.\n * N: 5 characters. Secuencial Number within the province.\n * C: 1 character. Control Digit: [0-9A-J].\n *\n * [ T ]: Kind of Organizations. Possible values:\n *\n *   A. Corporations\n *   B. LLCs\n *   C. General partnerships\n *   D. Companies limited partnerships\n *   E. Communities of goods\n *   F. Cooperative Societies\n *   G. Associations\n *   H. Communities of homeowners in horizontal property regime\n *   J. Civil Societies\n *   K. Old format\n *   L. Old format\n *   M. Old format\n *   N. Nonresident entities\n *   P. Local authorities\n *   Q. Autonomous bodies, state or not, and the like, and congregations and religious institutions\n *   R. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)\n *   S. Organs of State Administration and regions\n *   V. Agrarian Transformation\n *   W. Permanent establishments of non-resident in Spain\n *\n * [ C ]: Control Digit. It can be a number or a letter depending on T value:\n * [ T ]  -->  [ C ]\n * ------    ----------\n *   A         Number\n *   B         Number\n *   E         Number\n *   H         Number\n *   K         Letter\n *   P         Letter\n *   Q         Letter\n *   S         Letter\n *\n */\n$.validator.addMethod( 'cifES', function( value, element ) {\n\t'use strict';\n\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\n\tvar cifRegEx = new RegExp( /^([ABCDEFGHJKLMNPQRSUVW])(\\d{7})([0-9A-J])$/gi );\n\tvar letter  = value.substring( 0, 1 ), // [ T ]\n\t\tnumber  = value.substring( 1, 8 ), // [ P ][ P ][ N ][ N ][ N ][ N ][ N ]\n\t\tcontrol = value.substring( 8, 9 ), // [ C ]\n\t\tall_sum = 0,\n\t\teven_sum = 0,\n\t\todd_sum = 0,\n\t\ti, n,\n\t\tcontrol_digit,\n\t\tcontrol_letter;\n\n\tfunction isOdd( n ) {\n\t\treturn n % 2 === 0;\n\t}\n\n\t// Quick format test\n\tif ( value.length !== 9 || !cifRegEx.test( value ) ) {\n\t\treturn false;\n\t}\n\n\tfor ( i = 0; i < number.length; i++ ) {\n\t\tn = parseInt( number[ i ], 10 );\n\n\t\t// Odd positions\n\t\tif ( isOdd( i ) ) {\n\n\t\t\t// Odd positions are multiplied first.\n\t\t\tn *= 2;\n\n\t\t\t// If the multiplication is bigger than 10 we need to adjust\n\t\t\todd_sum += n < 10 ? n : n - 9;\n\n\t\t// Even positions\n\t\t// Just sum them\n\t\t} else {\n\t\t\teven_sum += n;\n\t\t}\n\t}\n\n\tall_sum = even_sum + odd_sum;\n\tcontrol_digit = ( 10 - ( all_sum ).toString().substr( -1 ) ).toString();\n\tcontrol_digit = parseInt( control_digit, 10 ) > 9 ? '0' : control_digit;\n\tcontrol_letter = 'JABCDEFGHI'.substr( control_digit, 1 ).toString();\n\n\t// Control must be a digit\n\tif ( letter.match( /[ABEH]/ ) ) {\n\t\treturn control === control_digit;\n\n\t// Control must be a letter\n\t} else if ( letter.match( /[KPQS]/ ) ) {\n\t\treturn control === control_letter;\n\t}\n\n\t// Can be either\n\treturn control === control_digit || control === control_letter;\n\n}, 'Please specify a valid CIF number.' );\n\n/*\n * Brazillian CPF number (Cadastrado de Pessoas Físicas) is the equivalent of a Brazilian tax registration number.\n * CPF numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.\n */\n$.validator.addMethod( 'cpfBR', function( value ) {\n\n\t// Removing special characters from value\n\tvalue = value.replace( /([~!@#$%^&*()_+=`{}\\[\\]\\-|\\\\:;'<>,.\\/? ])+/g, '' );\n\n\t// Checking value to have 11 digits only\n\tif ( value.length !== 11 ) {\n\t\treturn false;\n\t}\n\n\tvar sum = 0,\n\t\tfirstCN, secondCN, checkResult, i;\n\n\tfirstCN = parseInt( value.substring( 9, 10 ), 10 );\n\tsecondCN = parseInt( value.substring( 10, 11 ), 10 );\n\n\tcheckResult = function( sum, cn ) {\n\t\tvar result = ( sum * 10 ) % 11;\n\t\tif ( ( result === 10 ) || ( result === 11 ) ) {\n\t\t\tresult = 0;\n\t\t}\n\t\treturn ( result === cn );\n\t};\n\n\t// Checking for dump data\n\tif ( value === '' ||\n\t\tvalue === '00000000000' ||\n\t\tvalue === '11111111111' ||\n\t\tvalue === '22222222222' ||\n\t\tvalue === '33333333333' ||\n\t\tvalue === '44444444444' ||\n\t\tvalue === '55555555555' ||\n\t\tvalue === '66666666666' ||\n\t\tvalue === '77777777777' ||\n\t\tvalue === '88888888888' ||\n\t\tvalue === '99999999999'\n\t) {\n\t\treturn false;\n\t}\n\n\t// Step 1 - using first Check Number:\n\tfor ( i = 1; i <= 9; i++ ) {\n\t\tsum = sum + parseInt( value.substring( i - 1, i ), 10 ) * ( 11 - i );\n\t}\n\n\t// If first Check Number (CN) is valid, move to Step 2 - using second Check Number:\n\tif ( checkResult( sum, firstCN ) ) {\n\t\tsum = 0;\n\t\tfor ( i = 1; i <= 10; i++ ) {\n\t\t\tsum = sum + parseInt( value.substring( i - 1, i ), 10 ) * ( 12 - i );\n\t\t}\n\t\treturn checkResult( sum, secondCN );\n\t}\n\treturn false;\n\n}, 'Please specify a valid CPF number' );\n\n// https://jqueryvalidation.org/creditcard-method/\n// based on https://en.wikipedia.org/wiki/Luhn_algorithm\n$.validator.addMethod( 'creditcard', function( value, element ) {\n\tif ( this.optional( element ) ) {\n\t\treturn 'dependency-mismatch';\n\t}\n\n\t// Accept only spaces, digits and dashes\n\tif ( /[^0-9 \\-]+/.test( value ) ) {\n\t\treturn false;\n\t}\n\n\tvar nCheck = 0,\n\t\tnDigit = 0,\n\t\tbEven = false,\n\t\tn, cDigit;\n\n\tvalue = value.replace( /\\D/g, '' );\n\n\t// Basing min and max length on\n\t// https://developer.ean.com/general_info/Valid_Credit_Card_Types\n\tif ( value.length < 13 || value.length > 19 ) {\n\t\treturn false;\n\t}\n\n\tfor ( n = value.length - 1; n >= 0; n-- ) {\n\t\tcDigit = value.charAt( n );\n\t\tnDigit = parseInt( cDigit, 10 );\n\t\tif ( bEven ) {\n\t\t\tif ( ( nDigit *= 2 ) > 9 ) {\n\t\t\t\tnDigit -= 9;\n\t\t\t}\n\t\t}\n\n\t\tnCheck += nDigit;\n\t\tbEven = !bEven;\n\t}\n\n\treturn ( nCheck % 10 ) === 0;\n}, 'Please enter a valid credit card number.' );\n\n/* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator\n * Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0\n * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)\n */\n$.validator.addMethod( 'creditcardtypes', function( value, element, param ) {\n\tif ( /[^0-9\\-]+/.test( value ) ) {\n\t\treturn false;\n\t}\n\n\tvalue = value.replace( /\\D/g, '' );\n\n\tvar validTypes = 0x0000;\n\n\tif ( param.mastercard ) {\n\t\tvalidTypes |= 0x0001;\n\t}\n\tif ( param.visa ) {\n\t\tvalidTypes |= 0x0002;\n\t}\n\tif ( param.amex ) {\n\t\tvalidTypes |= 0x0004;\n\t}\n\tif ( param.dinersclub ) {\n\t\tvalidTypes |= 0x0008;\n\t}\n\tif ( param.enroute ) {\n\t\tvalidTypes |= 0x0010;\n\t}\n\tif ( param.discover ) {\n\t\tvalidTypes |= 0x0020;\n\t}\n\tif ( param.jcb ) {\n\t\tvalidTypes |= 0x0040;\n\t}\n\tif ( param.unknown ) {\n\t\tvalidTypes |= 0x0080;\n\t}\n\tif ( param.all ) {\n\t\tvalidTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\n\t}\n\tif ( validTypes & 0x0001 && /^(5[12345])/.test( value ) ) { // Mastercard\n\t\treturn value.length === 16;\n\t}\n\tif ( validTypes & 0x0002 && /^(4)/.test( value ) ) { // Visa\n\t\treturn value.length === 16;\n\t}\n\tif ( validTypes & 0x0004 && /^(3[47])/.test( value ) ) { // Amex\n\t\treturn value.length === 15;\n\t}\n\tif ( validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test( value ) ) { // Dinersclub\n\t\treturn value.length === 14;\n\t}\n\tif ( validTypes & 0x0010 && /^(2(014|149))/.test( value ) ) { // Enroute\n\t\treturn value.length === 15;\n\t}\n\tif ( validTypes & 0x0020 && /^(6011)/.test( value ) ) { // Discover\n\t\treturn value.length === 16;\n\t}\n\tif ( validTypes & 0x0040 && /^(3)/.test( value ) ) { // Jcb\n\t\treturn value.length === 16;\n\t}\n\tif ( validTypes & 0x0040 && /^(2131|1800)/.test( value ) ) { // Jcb\n\t\treturn value.length === 15;\n\t}\n\tif ( validTypes & 0x0080 ) { // Unknown\n\t\treturn true;\n\t}\n\treturn false;\n}, 'Please enter a valid credit card number.' );\n\n/**\n * Validates currencies with any given symbols by @jameslouiz\n * Symbols can be optional or required. Symbols required by default\n *\n * Usage examples:\n *  currency: [\"£\", false] - Use false for soft currency validation\n *  currency: [\"$\", false]\n *  currency: [\"RM\", false] - also works with text based symbols such as \"RM\" - Malaysia Ringgit etc\n *\n *  <input class=\"currencyInput\" name=\"currencyInput\">\n *\n * Soft symbol checking\n *  currencyInput: {\n *     currency: [\"$\", false]\n *  }\n *\n * Strict symbol checking (default)\n *  currencyInput: {\n *     currency: \"$\"\n *     //OR\n *     currency: [\"$\", true]\n *  }\n *\n * Multiple Symbols\n *  currencyInput: {\n *     currency: \"$,£,¢\"\n *  }\n */\n$.validator.addMethod( 'currency', function( value, element, param ) {\n    var isParamString = typeof param === 'string',\n        symbol = isParamString ? param : param[ 0 ],\n        soft = isParamString ? true : param[ 1 ],\n        regex;\n\n    symbol = symbol.replace( /,/g, '' );\n    symbol = soft ? symbol + ']' : symbol + ']?';\n    regex = '^[' + symbol + '([1-9]{1}[0-9]{0,2}(\\\\,[0-9]{3})*(\\\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\\\.[0-9]{0,2})?|0(\\\\.[0-9]{0,2})?|(\\\\.[0-9]{1,2})?)$';\n    regex = new RegExp( regex );\n    return this.optional( element ) || regex.test( value );\n\n}, 'Please specify a valid currency' );\n\n$.validator.addMethod( 'dateFA', function( value, element ) {\n\treturn this.optional( element ) || /^[1-4]\\d{3}\\/((0?[1-6]\\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\\/(30|([1-2][0-9])|(0?[1-9]))))$/.test( value );\n}, $.validator.messages.date );\n\n/**\n * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.\n *\n * @example $.validator.methods.date(\"01/01/1900\")\n * @result true\n *\n * @example $.validator.methods.date(\"01/13/1990\")\n * @result false\n *\n * @example $.validator.methods.date(\"01.01.1900\")\n * @result false\n *\n * @example <input name=\"pippo\" class=\"{dateITA:true}\" />\n * @desc Declares an optional input element whose value must be a valid date.\n *\n * @name $.validator.methods.dateITA\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod( 'dateITA', function( value, element ) {\n\tvar check = false,\n\t\tre = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\n\t\tadata, gg, mm, aaaa, xdata;\n\tif ( re.test( value ) ) {\n\t\tadata = value.split( '/' );\n\t\tgg = parseInt( adata[ 0 ], 10 );\n\t\tmm = parseInt( adata[ 1 ], 10 );\n\t\taaaa = parseInt( adata[ 2 ], 10 );\n\t\txdata = new Date( Date.UTC( aaaa, mm - 1, gg, 12, 0, 0, 0 ) );\n\t\tif ( ( xdata.getUTCFullYear() === aaaa ) && ( xdata.getUTCMonth() === mm - 1 ) && ( xdata.getUTCDate() === gg ) ) {\n\t\t\tcheck = true;\n\t\t} else {\n\t\t\tcheck = false;\n\t\t}\n\t} else {\n\t\tcheck = false;\n\t}\n\treturn this.optional( element ) || check;\n}, $.validator.messages.date );\n\n$.validator.addMethod( 'dateNL', function( value, element ) {\n\treturn this.optional( element ) || /^(0?[1-9]|[12]\\d|3[01])[\\.\\/\\-](0?[1-9]|1[012])[\\.\\/\\-]([12]\\d)?(\\d\\d)$/.test( value );\n}, $.validator.messages.date );\n\n// Older \"accept\" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept\n$.validator.addMethod( 'extension', function( value, element, param ) {\n\tparam = typeof param === 'string' ? param.replace( /,/g, '|' ) : 'png|jpe?g|gif';\n\treturn this.optional( element ) || value.match( new RegExp( '\\\\.(' + param + ')$', 'i' ) );\n}, $.validator.format( 'Please enter a value with a valid extension.' ) );\n\n/**\n * Dutch giro account numbers (not bank numbers) have max 7 digits\n */\n$.validator.addMethod( 'giroaccountNL', function( value, element ) {\n\treturn this.optional( element ) || /^[0-9]{1,7}$/.test( value );\n}, 'Please specify a valid giro account number' );\n\n/**\n * IBAN is the international bank account number.\n * It has a country - specific format, that is checked here too\n *\n * Validation is case-insensitive. Please make sure to normalize input yourself.\n */\n$.validator.addMethod( 'iban', function( value, element ) {\n\n\t// Some quick simple tests to prevent needless work\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\n\t// Remove spaces and to upper case\n\tvar iban = value.replace( / /g, '' ).toUpperCase(),\n\t\tibancheckdigits = '',\n\t\tleadingZeroes = true,\n\t\tcRest = '',\n\t\tcOperator = '',\n\t\tcountrycode, ibancheck, charAt, cChar, bbanpattern, bbancountrypatterns, ibanregexp, i, p;\n\n\t// Check for IBAN code length.\n\t// It contains:\n\t// country code ISO 3166-1 - two letters,\n\t// two check digits,\n\t// Basic Bank Account Number (BBAN) - up to 30 chars\n\tvar minimalIBANlength = 5;\n\tif ( iban.length < minimalIBANlength ) {\n\t\treturn false;\n\t}\n\n\t// Check the country code and find the country specific format\n\tcountrycode = iban.substring( 0, 2 );\n\tbbancountrypatterns = {\n\t\t'AL': '\\\\d{8}[\\\\dA-Z]{16}',\n\t\t'AD': '\\\\d{8}[\\\\dA-Z]{12}',\n\t\t'AT': '\\\\d{16}',\n\t\t'AZ': '[\\\\dA-Z]{4}\\\\d{20}',\n\t\t'BE': '\\\\d{12}',\n\t\t'BH': '[A-Z]{4}[\\\\dA-Z]{14}',\n\t\t'BA': '\\\\d{16}',\n\t\t'BR': '\\\\d{23}[A-Z][\\\\dA-Z]',\n\t\t'BG': '[A-Z]{4}\\\\d{6}[\\\\dA-Z]{8}',\n\t\t'CR': '\\\\d{17}',\n\t\t'HR': '\\\\d{17}',\n\t\t'CY': '\\\\d{8}[\\\\dA-Z]{16}',\n\t\t'CZ': '\\\\d{20}',\n\t\t'DK': '\\\\d{14}',\n\t\t'DO': '[A-Z]{4}\\\\d{20}',\n\t\t'EE': '\\\\d{16}',\n\t\t'FO': '\\\\d{14}',\n\t\t'FI': '\\\\d{14}',\n\t\t'FR': '\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}',\n\t\t'GE': '[\\\\dA-Z]{2}\\\\d{16}',\n\t\t'DE': '\\\\d{18}',\n\t\t'GI': '[A-Z]{4}[\\\\dA-Z]{15}',\n\t\t'GR': '\\\\d{7}[\\\\dA-Z]{16}',\n\t\t'GL': '\\\\d{14}',\n\t\t'GT': '[\\\\dA-Z]{4}[\\\\dA-Z]{20}',\n\t\t'HU': '\\\\d{24}',\n\t\t'IS': '\\\\d{22}',\n\t\t'IE': '[\\\\dA-Z]{4}\\\\d{14}',\n\t\t'IL': '\\\\d{19}',\n\t\t'IT': '[A-Z]\\\\d{10}[\\\\dA-Z]{12}',\n\t\t'KZ': '\\\\d{3}[\\\\dA-Z]{13}',\n\t\t'KW': '[A-Z]{4}[\\\\dA-Z]{22}',\n\t\t'LV': '[A-Z]{4}[\\\\dA-Z]{13}',\n\t\t'LB': '\\\\d{4}[\\\\dA-Z]{20}',\n\t\t'LI': '\\\\d{5}[\\\\dA-Z]{12}',\n\t\t'LT': '\\\\d{16}',\n\t\t'LU': '\\\\d{3}[\\\\dA-Z]{13}',\n\t\t'MK': '\\\\d{3}[\\\\dA-Z]{10}\\\\d{2}',\n\t\t'MT': '[A-Z]{4}\\\\d{5}[\\\\dA-Z]{18}',\n\t\t'MR': '\\\\d{23}',\n\t\t'MU': '[A-Z]{4}\\\\d{19}[A-Z]{3}',\n\t\t'MC': '\\\\d{10}[\\\\dA-Z]{11}\\\\d{2}',\n\t\t'MD': '[\\\\dA-Z]{2}\\\\d{18}',\n\t\t'ME': '\\\\d{18}',\n\t\t'NL': '[A-Z]{4}\\\\d{10}',\n\t\t'NO': '\\\\d{11}',\n\t\t'PK': '[\\\\dA-Z]{4}\\\\d{16}',\n\t\t'PS': '[\\\\dA-Z]{4}\\\\d{21}',\n\t\t'PL': '\\\\d{24}',\n\t\t'PT': '\\\\d{21}',\n\t\t'RO': '[A-Z]{4}[\\\\dA-Z]{16}',\n\t\t'SM': '[A-Z]\\\\d{10}[\\\\dA-Z]{12}',\n\t\t'SA': '\\\\d{2}[\\\\dA-Z]{18}',\n\t\t'RS': '\\\\d{18}',\n\t\t'SK': '\\\\d{20}',\n\t\t'SI': '\\\\d{15}',\n\t\t'ES': '\\\\d{20}',\n\t\t'SE': '\\\\d{20}',\n\t\t'CH': '\\\\d{5}[\\\\dA-Z]{12}',\n\t\t'TN': '\\\\d{20}',\n\t\t'TR': '\\\\d{5}[\\\\dA-Z]{17}',\n\t\t'AE': '\\\\d{3}\\\\d{16}',\n\t\t'GB': '[A-Z]{4}\\\\d{14}',\n\t\t'VG': '[\\\\dA-Z]{4}\\\\d{16}'\n\t};\n\n\tbbanpattern = bbancountrypatterns[ countrycode ];\n\n\t// As new countries will start using IBAN in the\n\t// future, we only check if the countrycode is known.\n\t// This prevents false negatives, while almost all\n\t// false positives introduced by this, will be caught\n\t// by the checksum validation below anyway.\n\t// Strict checking should return FALSE for unknown\n\t// countries.\n\tif ( typeof bbanpattern !== 'undefined' ) {\n\t\tibanregexp = new RegExp( '^[A-Z]{2}\\\\d{2}' + bbanpattern + '$', '' );\n\t\tif ( !( ibanregexp.test( iban ) ) ) {\n\t\t\treturn false; // Invalid country specific format\n\t\t}\n\t}\n\n\t// Now check the checksum, first convert to digits\n\tibancheck = iban.substring( 4, iban.length ) + iban.substring( 0, 4 );\n\tfor ( i = 0; i < ibancheck.length; i++ ) {\n\t\tcharAt = ibancheck.charAt( i );\n\t\tif ( charAt !== '0' ) {\n\t\t\tleadingZeroes = false;\n\t\t}\n\t\tif ( !leadingZeroes ) {\n\t\t\tibancheckdigits += '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf( charAt );\n\t\t}\n\t}\n\n\t// Calculate the result of: ibancheckdigits % 97\n\tfor ( p = 0; p < ibancheckdigits.length; p++ ) {\n\t\tcChar = ibancheckdigits.charAt( p );\n\t\tcOperator = '' + cRest + '' + cChar;\n\t\tcRest = cOperator % 97;\n\t}\n\treturn cRest === 1;\n}, 'Please specify a valid IBAN' );\n\n$.validator.addMethod( 'integer', function( value, element ) {\n\treturn this.optional( element ) || /^-?\\d+$/.test( value );\n}, 'A positive or negative non-decimal number please' );\n\n$.validator.addMethod( 'ipv4', function( value, element ) {\n\treturn this.optional( element ) || /^(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/i.test( value );\n}, 'Please enter a valid IP v4 address.' );\n\n$.validator.addMethod( 'ipv6', function( value, element ) {\n\treturn this.optional( element ) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test( value );\n}, 'Please enter a valid IP v6 address.' );\n\n$.validator.addMethod( 'lettersonly', function( value, element ) {\n\treturn this.optional( element ) || /^[a-z]+$/i.test( value );\n}, 'Letters only please' );\n\n$.validator.addMethod( 'letterswithbasicpunc', function( value, element ) {\n\treturn this.optional( element ) || /^[a-z\\-.,()'\"\\s]+$/i.test( value );\n}, 'Letters or punctuation only please' );\n\n$.validator.addMethod( 'mobileNL', function( value, element ) {\n\treturn this.optional( element ) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)6((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test( value );\n}, 'Please specify a valid mobile number' );\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n$.validator.addMethod( 'mobileUK', function( phone_number, element ) {\n\tphone_number = phone_number.replace( /\\(|\\)|\\s+|-/g, '' );\n\treturn this.optional( element ) || phone_number.length > 9 &&\n\t\tphone_number.match( /^(?:(?:(?:00\\s?|\\+)44\\s?|0)7(?:[1345789]\\d{2}|624)\\s?\\d{3}\\s?\\d{3})$/ );\n}, 'Please specify a valid mobile number' );\n\n$.validator.addMethod( 'netmask', function( value, element ) {\n    return this.optional( element ) || /^(254|252|248|240|224|192|128)\\.0\\.0\\.0|255\\.(254|252|248|240|224|192|128|0)\\.0\\.0|255\\.255\\.(254|252|248|240|224|192|128|0)\\.0|255\\.255\\.255\\.(254|252|248|240|224|192|128|0)/i.test( value );\n}, 'Please enter a valid netmask.' );\n\n/*\n * The NIE (Número de Identificación de Extranjero) is a Spanish tax identification number assigned by the Spanish\n * authorities to any foreigner.\n *\n * The NIE is the equivalent of a Spaniards Número de Identificación Fiscal (NIF) which serves as a fiscal\n * identification number. The CIF number (Certificado de Identificación Fiscal) is equivalent to the NIF, but applies to\n * companies rather than individuals. The NIE consists of an 'X' or 'Y' followed by 7 or 8 digits then another letter.\n */\n$.validator.addMethod( 'nieES', function( value, element ) {\n\t'use strict';\n\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\n\tvar nieRegEx = new RegExp( /^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/gi );\n\tvar validChars = 'TRWAGMYFPDXBNJZSQVHLCKET',\n\t\tletter = value.substr( value.length - 1 ).toUpperCase(),\n\t\tnumber;\n\n\tvalue = value.toString().toUpperCase();\n\n\t// Quick format test\n\tif ( value.length > 10 || value.length < 9 || !nieRegEx.test( value ) ) {\n\t\treturn false;\n\t}\n\n\t// X means same number\n\t// Y means number + 10000000\n\t// Z means number + 20000000\n\tvalue = value.replace( /^[X]/, '0' )\n\t\t.replace( /^[Y]/, '1' )\n\t\t.replace( /^[Z]/, '2' );\n\n\tnumber = value.length === 9 ? value.substr( 0, 8 ) : value.substr( 0, 9 );\n\n\treturn validChars.charAt( parseInt( number, 10 ) % 23 ) === letter;\n\n}, 'Please specify a valid NIE number.' );\n\n/*\n * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals\n */\n$.validator.addMethod( 'nifES', function( value, element ) {\n\t'use strict';\n\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\n\tvalue = value.toUpperCase();\n\n\t// Basic format test\n\tif ( !value.match( '((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)' ) ) {\n\t\treturn false;\n\t}\n\n\t// Test NIF\n\tif ( /^[0-9]{8}[A-Z]{1}$/.test( value ) ) {\n\t\treturn ( 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt( value.substring( 8, 0 ) % 23 ) === value.charAt( 8 ) );\n\t}\n\n\t// Test specials NIF (starts with K, L or M)\n\tif ( /^[KLM]{1}/.test( value ) ) {\n\t\treturn ( value[ 8 ] === 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt( value.substring( 8, 1 ) % 23 ) );\n\t}\n\n\treturn false;\n\n}, 'Please specify a valid NIF number.' );\n\n/*\n * Numer identyfikacji podatkowej ( NIP ) is the way tax identification used in Poland for companies\n */\n$.validator.addMethod( 'nipPL', function( value ) {\n\t'use strict';\n\n\tvalue = value.replace( /[^0-9]/g, '' );\n\n\tif ( value.length !== 10 ) {\n\t\treturn false;\n\t}\n\n\tvar arrSteps = [ 6, 5, 7, 2, 3, 4, 5, 6, 7 ];\n\tvar intSum = 0;\n\tfor ( var i = 0; i < 9; i++ ) {\n\t\tintSum += arrSteps[ i ] * value[ i ];\n\t}\n\tvar int2 = intSum % 11;\n\tvar intControlNr = ( int2 === 10 ) ? 0 : int2;\n\n\treturn ( intControlNr === parseInt( value[ 9 ], 10 ) );\n}, 'Please specify a valid NIP number.' );\n\n$.validator.addMethod( 'notEqualTo', function( value, element, param ) {\n\treturn this.optional( element ) || !$.validator.methods.equalTo.call( this, value, element, param );\n}, 'Please enter a different value, values must not be the same.' );\n\n$.validator.addMethod( 'nowhitespace', function( value, element ) {\n\treturn this.optional( element ) || /^\\S+$/i.test( value );\n}, 'No white space please' );\n\n/**\n* Return true if the field value matches the given format RegExp\n*\n* @example $.validator.methods.pattern(\"AR1004\",element,/^AR\\d{4}$/)\n* @result true\n*\n* @example $.validator.methods.pattern(\"BR1004\",element,/^AR\\d{4}$/)\n* @result false\n*\n* @name $.validator.methods.pattern\n* @type Boolean\n* @cat Plugins/Validate/Methods\n*/\n$.validator.addMethod( 'pattern', function( value, element, param ) {\n\tif ( this.optional( element ) ) {\n\t\treturn true;\n\t}\n\tif ( typeof param === 'string' ) {\n\t\tparam = new RegExp( '^(?:' + param + ')$' );\n\t}\n\treturn param.test( value );\n}, 'Invalid format.' );\n\n/**\n * Dutch phone numbers have 10 digits (or 11 and start with +31).\n */\n$.validator.addMethod( 'phoneNL', function( value, element ) {\n\treturn this.optional( element ) || /^((\\+|00(\\s|\\s?\\-\\s?)?)31(\\s|\\s?\\-\\s?)?(\\(0\\)[\\-\\s]?)?|0)[1-9]((\\s|\\s?\\-\\s?)?[0-9]){8}$/.test( value );\n}, 'Please specify a valid phone number.' );\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n\n// Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers\n$.validator.addMethod( 'phonesUK', function( phone_number, element ) {\n\tphone_number = phone_number.replace( /\\(|\\)|\\s+|-/g, '' );\n\treturn this.optional( element ) || phone_number.length > 9 &&\n\t\tphone_number.match( /^(?:(?:(?:00\\s?|\\+)44\\s?|0)(?:1\\d{8,9}|[23]\\d{9}|7(?:[1345789]\\d{8}|624\\d{6})))$/ );\n}, 'Please specify a valid uk phone number' );\n\n/* For UK phone functions, do the following server side processing:\n * Compare original input with this RegEx pattern:\n * ^\\(?(?:(?:00\\)?[\\s\\-]?\\(?|\\+)(44)\\)?[\\s\\-]?\\(?(?:0\\)?[\\s\\-]?\\(?)?|0)([1-9]\\d{1,4}\\)?[\\s\\d\\-]+)$\n * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'\n * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.\n * A number of very detailed GB telephone number RegEx patterns can also be found at:\n * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers\n */\n$.validator.addMethod( 'phoneUK', function( phone_number, element ) {\n\tphone_number = phone_number.replace( /\\(|\\)|\\s+|-/g, '' );\n\treturn this.optional( element ) || phone_number.length > 9 &&\n\t\tphone_number.match( /^(?:(?:(?:00\\s?|\\+)44\\s?)|(?:\\(?0))(?:\\d{2}\\)?\\s?\\d{4}\\s?\\d{4}|\\d{3}\\)?\\s?\\d{3}\\s?\\d{3,4}|\\d{4}\\)?\\s?(?:\\d{5}|\\d{3}\\s?\\d{3})|\\d{5}\\)?\\s?\\d{4,5})$/ );\n}, 'Please specify a valid phone number' );\n\n/**\n * Matches US phone number format\n *\n * where the area code may not start with 1 and the prefix may not start with 1\n * allows '-' or ' ' as a separator and allows parens around area code\n * some people may want to put a '1' in front of their number\n *\n * 1(212)-999-2345 or\n * 212 999 2344 or\n * 212-999-0983\n *\n * but not\n * 111-123-5434\n * and not\n * 212 123 4567\n */\n$.validator.addMethod( 'phoneUS', function( phone_number, element ) {\n\tphone_number = phone_number.replace( /\\s+/g, '' );\n\treturn this.optional( element ) || phone_number.length > 9 &&\n\t\tphone_number.match( /^(\\+?1-?)?(\\([2-9]([02-9]\\d|1[02-9])\\)|[2-9]([02-9]\\d|1[02-9]))-?[2-9]([02-9]\\d|1[02-9])-?\\d{4}$/ );\n}, 'Please specify a valid phone number' );\n\n/*\n* Valida CEPs do brasileiros:\n*\n* Formatos aceitos:\n* 99999-999\n* 99.999-999\n* 99999999\n*/\n$.validator.addMethod( 'postalcodeBR', function( cep_value, element ) {\n\treturn this.optional( element ) || /^\\d{2}.\\d{3}-\\d{3}?$|^\\d{5}-?\\d{3}?$/.test( cep_value );\n}, 'Informe um CEP válido.' );\n\n/**\n * Matches a valid Canadian Postal Code\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H 0H0\", element )\n * @result true\n *\n * @example jQuery.validator.methods.postalCodeCA( \"H0H0H0\", element )\n * @result false\n *\n * @name jQuery.validator.methods.postalCodeCA\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod( 'postalCodeCA', function( value, element ) {\n\treturn this.optional( element ) || /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJKLMNPRSTVWXYZ] *\\d[ABCEGHJKLMNPRSTVWXYZ]\\d$/i.test( value );\n}, 'Please specify a valid postal code' );\n\n/* Matches Italian postcode (CAP) */\n$.validator.addMethod( 'postalcodeIT', function( value, element ) {\n\treturn this.optional( element ) || /^\\d{5}$/.test( value );\n}, 'Please specify a valid postal code' );\n\n$.validator.addMethod( 'postalcodeNL', function( value, element ) {\n\treturn this.optional( element ) || /^[1-9][0-9]{3}\\s?[a-zA-Z]{2}$/.test( value );\n}, 'Please specify a valid postal code' );\n\n// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)\n$.validator.addMethod( 'postcodeUK', function( value, element ) {\n\treturn this.optional( element ) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\\s?(0AA))$/i.test( value );\n}, 'Please specify a valid UK postcode' );\n\n/*\n * Lets you say \"at least X inputs that match selector Y must be filled.\"\n *\n * The end result is that neither of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\n *\t...will validate unless at least one of them is filled.\n *\n * partnumber:\t{require_from_group: [1,\".productinfo\"]},\n * description: {require_from_group: [1,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields\n */\n$.validator.addMethod( 'require_from_group', function( value, element, options ) {\n\tvar $fields = $( options[ 1 ], element.form ),\n\t\t$fieldsFirst = $fields.eq( 0 ),\n\t\tvalidator = $fieldsFirst.data( 'valid_req_grp' ) ? $fieldsFirst.data( 'valid_req_grp' ) : $.extend( {}, this ),\n\t\tisValid = $fields.filter( function() {\n\t\t\treturn validator.elementValue( this );\n\t\t} ).length >= options[ 0 ];\n\n\t// Store the cloned validator for future validation\n\t$fieldsFirst.data( 'valid_req_grp', validator );\n\n\t// If element isn't being validated, run each require_from_group field's validation rules\n\tif ( !$( element ).data( 'being_validated' ) ) {\n\t\t$fields.data( 'being_validated', true );\n\t\t$fields.each( function() {\n\t\t\tvalidator.element( this );\n\t\t} );\n\t\t$fields.data( 'being_validated', false );\n\t}\n\treturn isValid;\n}, $.validator.format( 'Please fill at least {0} of these fields.' ) );\n\n/*\n * Lets you say \"either at least X inputs that match selector Y must be filled,\n * OR they must all be skipped (left blank).\"\n *\n * The end result, is that none of these inputs:\n *\n *\t<input class=\"productinfo\" name=\"partnumber\">\n *\t<input class=\"productinfo\" name=\"description\">\n *\t<input class=\"productinfo\" name=\"color\">\n *\n *\t...will validate unless either at least two of them are filled,\n *\tOR none of them are.\n *\n * partnumber:\t{skip_or_fill_minimum: [2,\".productinfo\"]},\n * description: {skip_or_fill_minimum: [2,\".productinfo\"]},\n * color:\t\t{skip_or_fill_minimum: [2,\".productinfo\"]}\n *\n * options[0]: number of fields that must be filled in the group\n * options[1]: CSS selector that defines the group of conditionally required fields\n *\n */\n$.validator.addMethod( 'skip_or_fill_minimum', function( value, element, options ) {\n\tvar $fields = $( options[ 1 ], element.form ),\n\t\t$fieldsFirst = $fields.eq( 0 ),\n\t\tvalidator = $fieldsFirst.data( 'valid_skip' ) ? $fieldsFirst.data( 'valid_skip' ) : $.extend( {}, this ),\n\t\tnumberFilled = $fields.filter( function() {\n\t\t\treturn validator.elementValue( this );\n\t\t} ).length,\n\t\tisValid = numberFilled === 0 || numberFilled >= options[ 0 ];\n\n\t// Store the cloned validator for future validation\n\t$fieldsFirst.data( 'valid_skip', validator );\n\n\t// If element isn't being validated, run each skip_or_fill_minimum field's validation rules\n\tif ( !$( element ).data( 'being_validated' ) ) {\n\t\t$fields.data( 'being_validated', true );\n\t\t$fields.each( function() {\n\t\t\tvalidator.element( this );\n\t\t} );\n\t\t$fields.data( 'being_validated', false );\n\t}\n\treturn isValid;\n}, $.validator.format( 'Please either skip these fields or fill at least {0} of them.' ) );\n\n/* Validates US States and/or Territories by @jdforsythe\n * Can be case insensitive or require capitalization - default is case insensitive\n * Can include US Territories or not - default does not\n * Can include US Military postal abbreviations (AA, AE, AP) - default does not\n *\n * Note: \"States\" always includes DC (District of Colombia)\n *\n * Usage examples:\n *\n *  This is the default - case insensitive, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false,\n *     includeTerritories: false,\n *     includeMilitary: false\n *  }\n *\n *  Only allow capital letters, no territories, no military zones\n *  stateInput: {\n *     caseSensitive: false\n *  }\n *\n *  Case insensitive, include territories but not military zones\n *  stateInput: {\n *     includeTerritories: true\n *  }\n *\n *  Only allow capital letters, include territories and military zones\n *  stateInput: {\n *     caseSensitive: true,\n *     includeTerritories: true,\n *     includeMilitary: true\n *  }\n *\n */\n$.validator.addMethod( 'stateUS', function( value, element, options ) {\n\tvar isDefault = typeof options === 'undefined',\n\t\tcaseSensitive = ( isDefault || typeof options.caseSensitive === 'undefined' ) ? false : options.caseSensitive,\n\t\tincludeTerritories = ( isDefault || typeof options.includeTerritories === 'undefined' ) ? false : options.includeTerritories,\n\t\tincludeMilitary = ( isDefault || typeof options.includeMilitary === 'undefined' ) ? false : options.includeMilitary,\n\t\tregex;\n\n\tif ( !includeTerritories && !includeMilitary ) {\n\t\tregex = '^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$';\n\t} else if ( includeTerritories && includeMilitary ) {\n\t\tregex = '^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$';\n\t} else if ( includeTerritories ) {\n\t\tregex = '^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$';\n\t} else {\n\t\tregex = '^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$';\n\t}\n\n\tregex = caseSensitive ? new RegExp( regex ) : new RegExp( regex, 'i' );\n\treturn this.optional( element ) || regex.test( value );\n}, 'Please specify a valid state' );\n\n// TODO check if value starts with <, otherwise don't try stripping anything\n$.validator.addMethod( 'strippedminlength', function( value, element, param ) {\n\treturn $( value ).text().length >= param;\n}, $.validator.format( 'Please enter at least {0} characters' ) );\n\n$.validator.addMethod( 'time', function( value, element ) {\n\treturn this.optional( element ) || /^([01]\\d|2[0-3]|[0-9])(:[0-5]\\d){1,2}$/.test( value );\n}, 'Please enter a valid time, between 00:00 and 23:59' );\n\n$.validator.addMethod( 'time12h', function( value, element ) {\n\treturn this.optional( element ) || /^((0?[1-9]|1[012])(:[0-5]\\d){1,2}(\\ ?[AP]M))$/i.test( value );\n}, 'Please enter a valid time in 12-hour am/pm format' );\n\n// Same as url, but TLD is optional\n$.validator.addMethod( 'url2', function( value, element ) {\n\treturn this.optional( element ) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test( value );\n}, $.validator.messages.url );\n\n/**\n * Return true, if the value is a valid vehicle identification number (VIN).\n *\n * Works with all kind of text inputs.\n *\n * @example <input type=\"text\" size=\"20\" name=\"VehicleID\" class=\"{required:true,vinUS:true}\" />\n * @desc Declares a required input element whose value must be a valid vehicle identification number.\n *\n * @name $.validator.methods.vinUS\n * @type Boolean\n * @cat Plugins/Validate/Methods\n */\n$.validator.addMethod( 'vinUS', function( v ) {\n\tif ( v.length !== 17 ) {\n\t\treturn false;\n\t}\n\n\tvar LL = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ],\n\t\tVL = [ 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9 ],\n\t\tFL = [ 8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 ],\n\t\trs = 0,\n\t\ti, n, d, f, cd, cdv;\n\n\tfor ( i = 0; i < 17; i++ ) {\n\t\tf = FL[ i ];\n\t\td = v.slice( i, i + 1 );\n\t\tif ( i === 8 ) {\n\t\t\tcdv = d;\n\t\t}\n\t\tif ( !isNaN( d ) ) {\n\t\t\td *= f;\n\t\t} else {\n\t\t\tfor ( n = 0; n < LL.length; n++ ) {\n\t\t\t\tif ( d.toUpperCase() === LL[ n ] ) {\n\t\t\t\t\td = VL[ n ];\n\t\t\t\t\td *= f;\n\t\t\t\t\tif ( isNaN( cdv ) && n === 8 ) {\n\t\t\t\t\t\tcdv = LL[ n ];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trs += d;\n\t}\n\tcd = rs % 11;\n\tif ( cd === 10 ) {\n\t\tcd = 'X';\n\t}\n\tif ( cd === cdv ) {\n\t\treturn true;\n\t}\n\treturn false;\n}, 'The specified vehicle identification number (VIN) is invalid.' );\n\n$.validator.addMethod( 'zipcodeUS', function( value, element ) {\n\treturn this.optional( element ) || /^\\d{5}(-\\d{4})?$/.test( value );\n}, 'The specified US ZIP Code is invalid' );\n\n$.validator.addMethod( 'ziprange', function( value, element ) {\n\treturn this.optional( element ) || /^90[2-5]\\d\\{2\\}-\\d{4}$/.test( value );\n}, 'Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx' );\nreturn $;\n}));"]}